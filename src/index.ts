import { app, BrowserWindow } from 'electron'
import { ipcMain } from 'electron'
import { dialog } from 'electron'
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // mainWindow.setFullScreen(true);
  // mainWindow.setSimpleFullScreen(true);
  // mainWindow.maximize()

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on('synchronous-message', (event, arg) => {
  console.log(arg) // prints "ping"
  event.returnValue = 'pong'
})
ipcMain.on('asynchronous-message', (event, arg) => {
  console.log(arg) // prints "ping"
  event.reply('asynchronous-reply', 'pong')
})

ipcMain.on('asynchronous-save', (event, arg) => {
  console.log(arg) // prints "ping"
  // event.returnValue = 'pong'
  // console.log(dialog.showOpenDialog({ properties: ['openFile', 'multiSelections'] }))
  dialog.showSaveDialog({
  }).then(result => {
    console.log(result.canceled)
    console.log(result.filePath)
    event.reply('asynchronous-save-reply', {
      data: arg,
      filePath: result.filePath
    })
    // event.reply('asynchronous-save-reply', result.filePath)
  }).catch(err => {
    console.log(err)
  })
})

ipcMain.on('asynchronous-open', (event, arg) => {
  console.log(arg) // prints "ping"
  // event.returnValue = 'pong'

  event.returnValue = dialog.showOpenDialogSync({
    properties: ['openFile']
  })[0]

  // event.returnValue = dialog.showOpenDialog({
  //   properties: ['openFile']
  // }).then(result => {
  //   console.log(result.canceled)
  //   console.log(result.filePaths)
  //   event.reply('asynchronous-open-reply', result.filePaths[0])
  // }).catch(err => {
  //   console.log(err)
  // })
})